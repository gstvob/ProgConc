EXPLICAÇÃO MILGRAU


Main : 
O método main vai inicializar tudo os bagulho que tem la e vai cria um executorservice e um scheduledexecutorservice

o executorservice vai executa 3 threads ao mesmo tempo e as 3 são os caçadores que vão executar os cachorros que são threads.
-- Talvez o professor reclame que foi criado o caçador pq ele tem cara de ser um cusão.

Forest :
Tem um arraylist pros potes dela e um atributo pra dizer quem foi o vencedor.

o método potAt retorna a posição de um pote que é passado no parametro.
o metodo getPot retorna um pote do arraylist na posição indicada no parametro
o addcoin coloca uma moeda em um pote cuja posição no arraylist é passada como parametro tbm
o método catch coins retira moeda do pote que é passado como parametro, se ele tiver.
setWinner e getWinner é o getter e setter do winner (do tipo Hunter).
o printWinner printa a cor do winner.
o StartPots ele vai adicionando aos potes que estão no arraylist os potes que são possiveis caminhos.

Dog:
Dog tem atributos para indicar as moedas, a cor, o coordenador, uma string que vai servir para escrever a cor, um Hunter que indica o seu dono, um pote que indica o pote atual, e o bosque.
getCoins e setCoins são o getter e o setter das moedas do cachorro.

o GetColor retorna a string da cor do animal.
o Sleep foi criado apenas para dar um sleep no cachorro(esse método só foi criado pq no coordinator tava dando um warning chato, dai pra tirar eu fiz isso.)

e o run executa a thread cachorro. Equanto as moedas forem menor que 20 ele vai pegar o pote atual e dizer que ele ta sendo usado pelo metodo setUsed da classe Pot. se esse pote não tem moedas ele dorme por 60 unidades de tempo(a não ser que o cachorro vermelho salve ele - que é o que provavelmente vai acontecer.)dai ele faz toda aquela palhaçada ali e pega a moeda se o cachorro vermelho colocou.
CASO o pote não esteja vazio quando ele tentar pegar ele simplesmente pega as moedas disponiveis e vaza.(cada salto de um pote pra outro é uma unidade de tempo por isso ele da varios sleep ali).

RedDog :
segura uma variavel que é o bosque.
método run vai basicamente fazer o cachorro vermelho ficar rodando e toda vez que ele achar um pote vazio com cachorros dormindo ele adiciona uma moeda no pote e acorda os cachorros dormindo nele com um interrupt seguido de um start()

Hunter: 
hunter tem atributos para indicar total de moedas, a cor, o bosque e os seus cachorros.
o método getColor() é um getter pro atributo da cor.
o metodo getStringColor() retorna uma string dependendo da cor.
setter do cachorro seta os cachorros, e getter das moedas retorna o total de moedas.

O método run ele vai executar as threads dos cachorros um por um, primeiro ele executa o primeiro cachorro e quando acabar, verifica se realmente o cachorro anterior terminou a execução se sim ele adiciona as moedas do primeiro cachorro ao seu total e executa o proximo.
quando o segundo acabar ele executa o primeiro denovo e quando o primeiro acabar novamente se ele tiver sido o primeiro de todos a acabar ele ganha.


Coordinator :
Método release resource apenas pega o pote que o cachorro quer entrar e verifica se ele pode entrar se o pote estiver em uso o cachorro vai dormir por 100 milisegundos senão ele entra no pote.






